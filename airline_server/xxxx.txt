void unit_test_queue(){

    queue_t* que = queue_create();

    printf("queue is empty : %d\n", queue_is_empty(que));

    int *ma = malloc(4);
    *ma = 1;
    queue_push(que, ma);

    ma = malloc(4);
    *ma = 2;
    queue_push(que, ma);

    ma = malloc(4);
    *ma = 3;
    queue_push(que, ma);

    printf("queue is empty : %d\n", queue_is_empty(que));

    printf("queue size %zu\n", queue_size(que));

    while(!queue_is_empty(que)){
        printf("queue element : %d\n", *(int*)queue_front(que));
        queue_pop(que);
    }

    printf("queue is empty : %d", queue_is_empty(que));
}

void unit_test_list(){
    linked_list_t list;
    linked_list_init(&list);

    int *ma = malloc(4);
    *ma = 1;
    linked_list_insert_last(&list,ma);

    ma = malloc(4);
    *ma = 2;
    linked_list_insert_last(&list,ma);

    ma = malloc(4);
    *ma = 3;
    linked_list_insert_last(&list,ma);

    printf("list size is :%zu\n",list.size);
    printf("list first ele : %d\n",*(int*)linked_list_get_first(&list));
    printf("list first las : %d\n",*(int*)linked_list_get_last(&list));

    list_node_t *iter = NULL;
    linked_list_for_each(&list,iter){
        printf("iter : %d\n",*(int*)(iter->data));
    }

    linked_list_rev_each(&list,iter){
        printf("iter : %d\n",*(int*)(iter->data));
    }
}

void unit_test_aircraft_class(){

    aircraft_class_t* aircraft = aircraft_class_construct("B738",0,189);

    aircraft_add_passengers(aircraft, client_info_class_construct("apple","4210111","1A"));
    aircraft_add_passengers(aircraft, client_info_class_construct("banana","4210222","1B"));
    aircraft_add_passengers(aircraft, client_info_class_construct("orange","4210333","1C"));

    printf("aircraft passenger size : %zu\n",aircraft->passengers_info.size);

    client_info_class_t *client_info_object = NULL;

    aircraft_for_each_passengers(aircraft,client_info_object){
        printf("aircraft_size [%d] name[%s] id[%s] seat[%s]\n",
               aircraft_get_currentCapacity(aircraft),
               client_info_object->name,client_info_object->id,client_info_object->seat);
    }

}

void unit_test_socket(){

    printf("Hello, World!\n");

    LPWSADATA sock_init_handle = socket_init();

    printf("win socket init is %p\n",sock_init_handle);

    if(sock_init_handle == NULL){
        perror("win socket init error!\n");
        goto __to_release;
    }

    socket_code sock_res_code = 0;

    socket_info airline_sock_info = socket_create(2764,"127.0.0.1");

    printf("socket create fd is : 0x%llX\n",airline_sock_info.socket);

    if(socket_is_failed(airline_sock_info.socket)){
        perror("socket create is failed!\n");
        goto __to_release;
    }

    sock_res_code = socket_bind(airline_sock_info.socket,airline_sock_info.sock_addr);

    printf("socket bind res : %d\n",sock_res_code);

    if(socket_is_failed(sock_res_code)){
        perror("socket bind is failed!\n");
        goto __to_release;
    }

    sock_res_code = socket_listen(airline_sock_info.socket,10);

    printf("socket listen res : %d\n",sock_res_code);

    if(socket_is_failed(sock_res_code)){
        perror("socket listen is failed!\n");
        goto __to_release;
    }

    printf("socket wait client connect!\n");

    socket_info client = socket_accept(airline_sock_info.socket);
    printf("socket client [address : %s] [port : %d]\n", inet_ntoa(client.sock_addr.sin_addr),client.sock_addr.sin_port);

    //recv hello
    char buffer[32] = {0};
    printf("socket wait client api request!\n");
    int total_bytes = socket_io_recv(client.socket,buffer,sizeof(buffer),NULL);
    printf("socket [client : %s] [pack_bytes : %d]\n",buffer,total_bytes);

    socket_close(client.socket);
    printf("socket client is closed..\n");


    __to_release:
    printf("socket close server\n");
    socket_close(airline_sock_info.socket);
    printf("socket release winsock\n");
    socket_release(sock_init_handle);
}